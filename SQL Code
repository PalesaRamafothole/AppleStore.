CREATE TABLE appleStore_description_combined AS

SELECT *
FROM appleStore_description1

UNION ALL

SELECT *
FROM appleStore_description2

UNION ALL

SELECT *
FROM appleStore_description3

UNION ALL

SELECT * 
FROM appleStore_description4


**EXPLORATORY DATA ANALYSIS**

--Check the number of unique apps in both tablesAppleStore

SELECT COUNT (DISTINCT id) AS UniqueAppIDs
FROM AppleStore

SELECT COUNT (DISTINCT id) AS UniqueAppIDs
FROM appleStore_description_combined

-- Check for any missing values in key fieldsAppStore

SELECT COUNT(*) AS MissingValues
FROM AppleStore
WHERE track_name IS NULL OR user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(*) AS MissingValues
FROM appleStore_description_combined
WHERE app_desc IS NULL

-- Number of apps per genre

SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
Group by prime_genre
ORDER BY NumApps DESC 

--Overview of apps rating 

SELECT min(user_rating) AS MinRating, 
       max(user_rating) AS MaxRating,
       avg(user_rating) AS AvgRating
FROM AppleStore

--Distribution of app prices 

select 
       (price/2) * 2 AS PriceInStart,
       ((price/2) * 2) *2 AS PriceInEnd,
       COUNT (*) AS NumApps
from AppleStore

GROUP BY PriceInStart
ORDER BY PriceInStart

** Data Analysis **

-- determine whether paid apps have higher ratings than free apps 

SELECT CASE 
            WHEN price > 0 THEN 'Paid'
            ELSE 'Free'
       END as App_Type,
       avg(user_rating) as Avg_Rating
from AppleStore
group by App_Type

-- Check if apps that support more languages have higher ratings 

SELECT CASE 
           WHEN lang_num < 10 then '<10 languages'  
           WHEN lang_num between 10 and 30 then '10-30 languages'
           else '>30 languages'
      end as Language_Bucket,
      avg(user_rating) as Avg_Rating
from AppleStore
GROUP by Language_Bucket
Order by Avg_Rating DESC

-- Genre with low ratings 

SELECT prime_genre,
       avg(user_rating) as Avg_Rating
FROM AppleStore
GROUP BY prime_genre
Order by Avg_Rating asc 
limit 10

-- Check if there is correlation between app description length and the user rating 


select CASE 
           WHEN length(b.app_desc) < 500 THEN 'Short'
           when length(b.app_desc) BETWEEN 500 and 1000 then 'Medium'
           else 'Long'
      END AS description_length_bucket,
      avg(a.user_rating) as Average_Rating

from 
     AppleStore AS a  
JOIN 
     appleStore_description_combined AS b 
ON 
    a.id = b.id 
    
GROUP by description_length_bucket
order by Average_Rating DESC

--Check top rated apps divided by the app category 
 
select 
      prime_genre,
      track_name,
      user_rating
from (
      select 
      prime_genre,
      track_name,
      user_rating,
      RANK() OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) as rank
      from 
      AppleStore
     ) as a 
where 
a.rank = 1 
